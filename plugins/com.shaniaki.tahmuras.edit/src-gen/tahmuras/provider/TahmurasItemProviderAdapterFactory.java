/**
 */
package tahmuras.provider;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

import tahmuras.util.TahmurasAdapterFactory;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class TahmurasItemProviderAdapterFactory extends TahmurasAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public TahmurasItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link tahmuras.ApplicationComponent} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ApplicationComponentItemProvider applicationComponentItemProvider;

	/**
	 * This creates an adapter for a {@link tahmuras.ApplicationComponent}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createApplicationComponentAdapter() {
		if (applicationComponentItemProvider == null) {
			applicationComponentItemProvider = new ApplicationComponentItemProvider(this);
		}

		return applicationComponentItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link tahmuras.PlatformComponent} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PlatformComponentItemProvider platformComponentItemProvider;

	/**
	 * This creates an adapter for a {@link tahmuras.PlatformComponent}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPlatformComponentAdapter() {
		if (platformComponentItemProvider == null) {
			platformComponentItemProvider = new PlatformComponentItemProvider(this);
		}

		return platformComponentItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link tahmuras.LogicalClock} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected LogicalClockItemProvider logicalClockItemProvider;

	/**
	 * This creates an adapter for a {@link tahmuras.LogicalClock}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createLogicalClockAdapter() {
		if (logicalClockItemProvider == null) {
			logicalClockItemProvider = new LogicalClockItemProvider(this);
		}

		return logicalClockItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link tahmuras.DecisionVariable} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DecisionVariableItemProvider decisionVariableItemProvider;

	/**
	 * This creates an adapter for a {@link tahmuras.DecisionVariable}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDecisionVariableAdapter() {
		if (decisionVariableItemProvider == null) {
			decisionVariableItemProvider = new DecisionVariableItemProvider(this);
		}

		return decisionVariableItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link tahmuras.ClockConstraint} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ClockConstraintItemProvider clockConstraintItemProvider;

	/**
	 * This creates an adapter for a {@link tahmuras.ClockConstraint}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createClockConstraintAdapter() {
		if (clockConstraintItemProvider == null) {
			clockConstraintItemProvider = new ClockConstraintItemProvider(this);
		}

		return clockConstraintItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link tahmuras.InstantiationConstraint} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected InstantiationConstraintItemProvider instantiationConstraintItemProvider;

	/**
	 * This creates an adapter for a {@link tahmuras.InstantiationConstraint}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createInstantiationConstraintAdapter() {
		if (instantiationConstraintItemProvider == null) {
			instantiationConstraintItemProvider = new InstantiationConstraintItemProvider(this);
		}

		return instantiationConstraintItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link tahmuras.CostMetric} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CostMetricItemProvider costMetricItemProvider;

	/**
	 * This creates an adapter for a {@link tahmuras.CostMetric}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCostMetricAdapter() {
		if (costMetricItemProvider == null) {
			costMetricItemProvider = new CostMetricItemProvider(this);
		}

		return costMetricItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link tahmuras.PerformanceMetric} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PerformanceMetricItemProvider performanceMetricItemProvider;

	/**
	 * This creates an adapter for a {@link tahmuras.PerformanceMetric}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPerformanceMetricAdapter() {
		if (performanceMetricItemProvider == null) {
			performanceMetricItemProvider = new PerformanceMetricItemProvider(this);
		}

		return performanceMetricItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link tahmuras.PlatformModel} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PlatformModelItemProvider platformModelItemProvider;

	/**
	 * This creates an adapter for a {@link tahmuras.PlatformModel}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPlatformModelAdapter() {
		if (platformModelItemProvider == null) {
			platformModelItemProvider = new PlatformModelItemProvider(this);
		}

		return platformModelItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link tahmuras.ApplicationModel} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ApplicationModelItemProvider applicationModelItemProvider;

	/**
	 * This creates an adapter for a {@link tahmuras.ApplicationModel}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createApplicationModelAdapter() {
		if (applicationModelItemProvider == null) {
			applicationModelItemProvider = new ApplicationModelItemProvider(this);
		}

		return applicationModelItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link tahmuras.BinaryRelation} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected BinaryRelationItemProvider binaryRelationItemProvider;

	/**
	 * This creates an adapter for a {@link tahmuras.BinaryRelation}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createBinaryRelationAdapter() {
		if (binaryRelationItemProvider == null) {
			binaryRelationItemProvider = new BinaryRelationItemProvider(this);
		}

		return binaryRelationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link tahmuras.BindingModel} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected BindingModelItemProvider bindingModelItemProvider;

	/**
	 * This creates an adapter for a {@link tahmuras.BindingModel}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createBindingModelAdapter() {
		if (bindingModelItemProvider == null) {
			bindingModelItemProvider = new BindingModelItemProvider(this);
		}

		return bindingModelItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link tahmuras.DSEModel} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DSEModelItemProvider dseModelItemProvider;

	/**
	 * This creates an adapter for a {@link tahmuras.DSEModel}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDSEModelAdapter() {
		if (dseModelItemProvider == null) {
			dseModelItemProvider = new DSEModelItemProvider(this);
		}

		return dseModelItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (applicationComponentItemProvider != null) applicationComponentItemProvider.dispose();
		if (platformComponentItemProvider != null) platformComponentItemProvider.dispose();
		if (logicalClockItemProvider != null) logicalClockItemProvider.dispose();
		if (decisionVariableItemProvider != null) decisionVariableItemProvider.dispose();
		if (clockConstraintItemProvider != null) clockConstraintItemProvider.dispose();
		if (instantiationConstraintItemProvider != null) instantiationConstraintItemProvider.dispose();
		if (costMetricItemProvider != null) costMetricItemProvider.dispose();
		if (performanceMetricItemProvider != null) performanceMetricItemProvider.dispose();
		if (platformModelItemProvider != null) platformModelItemProvider.dispose();
		if (applicationModelItemProvider != null) applicationModelItemProvider.dispose();
		if (binaryRelationItemProvider != null) binaryRelationItemProvider.dispose();
		if (bindingModelItemProvider != null) bindingModelItemProvider.dispose();
		if (dseModelItemProvider != null) dseModelItemProvider.dispose();
	}

}
